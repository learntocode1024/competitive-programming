#include <algorithm>
#include <cstdio>
#include <climits>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
typedef long long i64;
typedef unsigned i32;
typedef unsigned long long u64;
#define FILEIO(x) freopen(x".in", "r", stdin); freopen(x".out", "w", stdout);
#define fi first
#define se second
#define MX 100005
int n, m;
vector<pair<int, int> > G[MX];
bool h[MX];

namespace SUB1 {
int dep[MX], fa[MX], idf[MX];
void dfs(int u) {
  for (auto v : G[u]) {
    if (!dep[v.fi]) {
      dep[v.fi] = dep[u] + 1;
      fa[v.fi] = u;
      idf[v.fi] = v.se;
      dfs(v.fi);
    }
  }
}
inline void solve() {
  for (int i = 1, u, v; i < n; ++i) {
    cin >> u >> v;
    G[u].emplace_back(v, i);
    G[v].emplace_back(u, i);
  }
  dep[1] = 1;
  dfs(1);
  for (int i = 0, op, a, b, prev = 0; i < m; ++i) {
    cin >> op >> a >> b;
    if (op == 1) {
      if (dep[a] < dep[b]) swap(a, b);
      int pa = 0;
      while (dep[a] > dep[b]) {
        for (auto v : G[a]) {
          if (v.fi == fa[a]) h[v.se] = 1;
          else if (v.fi != pa) h[v.se] = 0;
        }
        pa = a;
        a = fa[a];
      }
      int pb = 0;
      while (a != b) {
        for (auto v : G[a]) {
          if (v.fi == fa[a]) h[v.se] = 1;
          else if (v.fi != pa) h[v.se] = 0;
        }
        pa = a;
        a = fa[a];
        for (auto v : G[b]) {
          if (v.fi == fa[b]) h[v.se] = 1;
          else if (v.fi != pb) h[v.se] = 0;
        }
        pb = b;
        b = fa[b];
      }
      for (auto v : G[b]) {
        if (v.fi == pa) h[v.se] = 1;
        else if (v.fi != pb) h[v.se] = 0;
      }
    } else {
      int ans = 0;
      if (dep[a] < dep[b]) swap(a, b);
      while (dep[a] > dep[b]) {
        ans += h[idf[a]];
        a = fa[a];
      }
      while (a != b) {
        ans += h[idf[a]];
        a = fa[a];
        ans += h[idf[b]];
        b = fa[b];
      }
      cout << ans << '\n';
    }
  }
  for (int i = 1; i <= n; ++i) {
    G[i].clear();
    h[i] = dep[i] = fa[i] = idf[i] = 0;
  }
}
}

namespace SUB2 {

}

int main() {
  cin.tie(0);
  ios::sync_with_stdio(0);
  int T;
  cin >> T;
  while (T--) {
    cin >> n >> m;
    if (1 || n <= 5000 && m <= 5000) {
      SUB1::solve();
    }
  }
  return 0;
}

